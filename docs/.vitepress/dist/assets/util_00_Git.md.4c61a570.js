import{_ as e,c as i,o as d,a as c}from"./app.b2603863.js";const m=JSON.parse('{"title":"初始化","description":"","frontmatter":{},"headers":[],"relativePath":"util/00_Git.md"}'),o={name:"util/00_Git.md"},l=c('<h1 id="初始化" tabindex="-1">初始化 <a class="header-anchor" href="#初始化" aria-hidden="true">#</a></h1><ul><li><code>git init</code></li><li><code>git init 文件夹</code></li><li><code>git clone 网址</code></li></ul><h1 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-hidden="true">#</a></h1><ul><li><code>git config --global user.name &quot;用户名&quot;</code></li><li><code>git config --global user.email &quot;邮箱&quot;</code></li><li><code>git config --global http.proxy http://127.0.0.1:7890</code></li><li><code>git config --list</code></li></ul><h1 id="暂存" tabindex="-1">暂存 <a class="header-anchor" href="#暂存" aria-hidden="true">#</a></h1><ul><li><code>git add .</code></li></ul><h1 id="提交" tabindex="-1">提交 <a class="header-anchor" href="#提交" aria-hidden="true">#</a></h1><ul><li><code>git commit -m&#39;提交信息&#39;</code></li></ul><h1 id="删除" tabindex="-1">删除 <a class="header-anchor" href="#删除" aria-hidden="true">#</a></h1><ul><li><code>rm 仅删除工作区-不暂存.txt</code></li><li><code>git rm 删除工作区-且暂存.txt</code></li><li><code>git rm -f 强制删除工作区-且暂存.txt</code></li><li><code>git rm -cached 删除暂存区-且暂存.txt</code></li></ul><h1 id="状态" tabindex="-1">状态 <a class="header-anchor" href="#状态" aria-hidden="true">#</a></h1><ul><li><code>git status</code></li><li><code>git log</code></li><li><code>git log -a --graph --abbrev-commit --pretty=oneline</code></li><li><code>git diff</code></li><li><code>git diff 提交ID</code></li></ul><h1 id="重置" tabindex="-1">重置 <a class="header-anchor" href="#重置" aria-hidden="true">#</a></h1><ul><li><code>git checkout .</code></li><li><code>git reset</code></li><li><code>git reset --hard 提交ID</code></li></ul><h1 id="分支" tabindex="-1">分支 <a class="header-anchor" href="#分支" aria-hidden="true">#</a></h1><ul><li><code>git branch</code></li><li><code>git branch -r</code></li><li><code>git branch -a</code></li><li><code>git branch -vv</code></li><li><code>git branch 分支</code></li><li><code>git branch -d 分支</code></li><li><code>git branch -dr 源/分支</code></li><li><code>git branch --set-upstream-to=源/分支</code></li><li><code>git checkout 分支</code></li><li><code>git checkout -b 分支</code></li></ul><h1 id="合并" tabindex="-1">合并 <a class="header-anchor" href="#合并" aria-hidden="true">#</a></h1><ul><li><code>git merge 指定分支</code></li><li><code>git merge --abbort</code></li></ul><h1 id="同步" tabindex="-1">同步 <a class="header-anchor" href="#同步" aria-hidden="true">#</a></h1><ul><li><code>git remote</code></li><li><code>git remote -v</code></li><li><code>git remote add 源 地址</code></li><li><code>git remote remove 源</code></li><li><code>git remote rename 旧名 新名</code></li><li><code>git fetch</code></li><li><code>git fetch 源</code></li><li><code>git pull</code></li><li><code>git pull 源 分支</code></li><li><code>git push</code></li><li><code>git push -u 源 分支</code></li><li><code>git push --set-upstream 源 分支</code></li><li><code>git push 源 -d 分支</code></li></ul><h1 id="ssh" tabindex="-1">SSH <a class="header-anchor" href="#ssh" aria-hidden="true">#</a></h1><ul><li><code>ssh-keygen -t ed25519</code></li><li><code>ssh</code></li></ul>',22),t=[l];function a(r,h,n,s,g,u){return d(),i("div",null,t)}const f=e(o,[["render",a]]);export{m as __pageData,f as default};
