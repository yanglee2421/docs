import{_ as s,c as l,o as a,a as n}from"./app.a780e610.js";const C=JSON.parse('{"title":"ES2015","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. 声明命令","slug":"_1-声明命令","link":"#_1-声明命令","children":[]},{"level":2,"title":"2. 解构赋值","slug":"_2-解构赋值","link":"#_2-解构赋值","children":[]},{"level":2,"title":"3. 字符串处理","slug":"_3-字符串处理","link":"#_3-字符串处理","children":[{"level":3,"title":"3-1 String.prototype","slug":"_3-1-string-prototype","link":"#_3-1-string-prototype","children":[]},{"level":3,"title":"3-2 模板字符串","slug":"_3-2-模板字符串","link":"#_3-2-模板字符串","children":[]},{"level":3,"title":"3-3 for of可以遍历String","slug":"_3-3-for-of可以遍历string","link":"#_3-3-for-of可以遍历string","children":[]}]},{"level":2,"title":"4. 箭头函数","slug":"_4-箭头函数","link":"#_4-箭头函数","children":[]},{"level":2,"title":"5. 类","slug":"_5-类","link":"#_5-类","children":[]},{"level":2,"title":"6. 简写","slug":"_6-简写","link":"#_6-简写","children":[]},{"level":2,"title":"7. 扩展运算符","slug":"_7-扩展运算符","link":"#_7-扩展运算符","children":[]},{"level":2,"title":"8. 模块化","slug":"_8-模块化","link":"#_8-模块化","children":[]},{"level":2,"title":"9. Symbol","slug":"_9-symbol","link":"#_9-symbol","children":[{"level":3,"title":"9-1 创建Symbol","slug":"_9-1-创建symbol","link":"#_9-1-创建symbol","children":[]},{"level":3,"title":"9-2 Symbol.prototype","slug":"_9-2-symbol-prototype","link":"#_9-2-symbol-prototype","children":[]},{"level":3,"title":"9-3 Symbol","slug":"_9-3-symbol","link":"#_9-3-symbol","children":[]}]},{"level":2,"title":"10. Set、Map","slug":"_10-set、map","link":"#_10-set、map","children":[{"level":3,"title":"10-1 Set.prototype","slug":"_10-1-set-prototype","link":"#_10-1-set-prototype","children":[]},{"level":3,"title":"10-2 Map.protytype","slug":"_10-2-map-protytype","link":"#_10-2-map-protytype","children":[]}]},{"level":2,"title":"11. 参数","slug":"_11-参数","link":"#_11-参数","children":[]},{"level":2,"title":"12. promise","slug":"_12-promise","link":"#_12-promise","children":[]},{"level":2,"title":"1. 求幂运算符","slug":"_1-求幂运算符","link":"#_1-求幂运算符","children":[]},{"level":2,"title":"2. Array.prototype","slug":"_2-array-prototype","link":"#_2-array-prototype","children":[]},{"level":2,"title":"1. String.prototype","slug":"_1-string-prototype","link":"#_1-string-prototype","children":[]},{"level":2,"title":"2. Object.prototype","slug":"_2-object-prototype","link":"#_2-object-prototype","children":[]},{"level":2,"title":"3. Object","slug":"_3-object","link":"#_3-object","children":[]},{"level":2,"title":"4. promise","slug":"_4-promise","link":"#_4-promise","children":[]},{"level":2,"title":"1. 正则","slug":"_1-正则","link":"#_1-正则","children":[]},{"level":2,"title":"2. Promise","slug":"_2-promise","link":"#_2-promise","children":[]},{"level":2,"title":"1. try...catch...finally","slug":"_1-try-catch-finally","link":"#_1-try-catch-finally","children":[]},{"level":2,"title":"2. function.prototype","slug":"_2-function-prototype","link":"#_2-function-prototype","children":[]},{"level":2,"title":"3. Object","slug":"_3-object-1","link":"#_3-object-1","children":[]},{"level":2,"title":"4. Array.prototype","slug":"_4-array-prototype","link":"#_4-array-prototype","children":[]},{"level":2,"title":"5. String.prototype","slug":"_5-string-prototype","link":"#_5-string-prototype","children":[]},{"level":2,"title":"1. String.prototype","slug":"_1-string-prototype-1","link":"#_1-string-prototype-1","children":[]},{"level":2,"title":"2. 动态import","slug":"_2-动态import","link":"#_2-动态import","children":[]},{"level":2,"title":"3. BigInt","slug":"_3-bigint","link":"#_3-bigint","children":[]},{"level":2,"title":"4. Promise","slug":"_4-promise-1","link":"#_4-promise-1","children":[]},{"level":2,"title":"5. globalThis","slug":"_5-globalthis","link":"#_5-globalthis","children":[]},{"level":2,"title":"6. ?.","slug":"_6","link":"#_6","children":[]},{"level":2,"title":"7. ??","slug":"_7","link":"#_7","children":[]},{"level":2,"title":"String.prototype","slug":"string-prototype","link":"#string-prototype","children":[]},{"level":2,"title":"逻辑赋值运算符","slug":"逻辑赋值运算符","link":"#逻辑赋值运算符","children":[]},{"level":2,"title":"数字分隔符","slug":"数字分隔符","link":"#数字分隔符","children":[]},{"level":2,"title":"1. 顶层await","slug":"_1-顶层await","link":"#_1-顶层await","children":[]},{"level":2,"title":"2. Array.prototype","slug":"_2-array-prototype-1","link":"#_2-array-prototype-1","children":[]}],"relativePath":"ECMAScript/index.md"}'),o={name:"ECMAScript/index.md"},e=n(`<h1 id="es2015" tabindex="-1">ES2015 <a class="header-anchor" href="#es2015" aria-hidden="true">#</a></h1><h2 id="_1-声明命令" tabindex="-1">1. 声明命令 <a class="header-anchor" href="#_1-声明命令" aria-hidden="true">#</a></h2><ul><li><code>let</code></li><li><code>const</code></li></ul><h2 id="_2-解构赋值" tabindex="-1">2. 解构赋值 <a class="header-anchor" href="#_2-解构赋值" aria-hidden="true">#</a></h2><ul><li>默认值</li><li>先声明，后赋值</li><li>嵌套</li><li>解构实参</li><li>选择性取值</li><li>数组</li><li>变量换值</li><li>对象</li><li>重命名</li><li>查找原型</li></ul><h2 id="_3-字符串处理" tabindex="-1">3. 字符串处理 <a class="header-anchor" href="#_3-字符串处理" aria-hidden="true">#</a></h2><h3 id="_3-1-string-prototype" tabindex="-1">3-1 <code>String.prototype</code> <a class="header-anchor" href="#_3-1-string-prototype" aria-hidden="true">#</a></h3><ul><li><code>includes(item, fromIndex)</code>，判断<code>item</code>是否包含在<code>this</code>中</li><li><code>startsWith(item, fromIndex)</code>，判断<code>item</code>串是否在<code>this</code>开头</li><li><code>endsWith(item, fromIndex)</code>，判断<code>item</code>是否在<code>this</code>尾部</li><li><code>repeat(int)</code>，返回将字符串重复<code>int</code>次后拼接成的结果，<code>int</code>要求为正整数或0（-0也视为0），不是则会被取整</li></ul><h3 id="_3-2-模板字符串" tabindex="-1">3-2 模板字符串 <a class="header-anchor" href="#_3-2-模板字符串" aria-hidden="true">#</a></h3><ul><li>变量</li><li>换行</li></ul><h3 id="_3-3-for-of可以遍历string" tabindex="-1">3-3 <code>for of</code>可以遍历<code>String</code> <a class="header-anchor" href="#_3-3-for-of可以遍历string" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">str</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">( </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> )</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">str</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">( </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> )</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="_4-箭头函数" tabindex="-1">4. 箭头函数 <a class="header-anchor" href="#_4-箭头函数" aria-hidden="true">#</a></h2><ul><li>静态<code>this</code></li><li><code>return</code>简写</li></ul><h2 id="_5-类" tabindex="-1">5. 类 <a class="header-anchor" href="#_5-类" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">Class Person </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">constructor</span><span style="color:#F07178;">( </span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">age</span><span style="color:#F07178;"> )</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">age</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">age</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">callName</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">( </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> )</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">static</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">perProp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">这是仅属于Person的属性</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">static</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">callPerson</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">( </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">perProp</span><span style="color:#F07178;"> )</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="_6-简写" tabindex="-1">6. 简写 <a class="header-anchor" href="#_6-简写" aria-hidden="true">#</a></h2><ul><li>对象简写</li><li>对象属性名的<code>[key]</code>写法</li><li>方法简写</li></ul><h2 id="_7-扩展运算符" tabindex="-1">7. 扩展运算符 <a class="header-anchor" href="#_7-扩展运算符" aria-hidden="true">#</a></h2><ul><li>数组</li><li>对象</li><li><code>Set</code></li><li>参数</li><li>iterator接口</li></ul><h2 id="_8-模块化" tabindex="-1">8. 模块化 <a class="header-anchor" href="#_8-模块化" aria-hidden="true">#</a></h2><ul><li>import <ul><li><code>import obj from &quot;./file&quot;</code></li><li><code>import { default as name } from &quot;&quot;./file</code></li><li><code>import * as obj from &quot;./file&quot;</code></li><li><code>import { obj, fun } from &quot;./file&quot;</code></li></ul></li><li>export <ul><li><code>export default {}</code></li><li><code>export const obj = {} export function fun(){}</code></li><li><code>export { obj, fun }</code></li></ul></li><li>中转 <ul><li><code>export * as Name from &quot;./file&quot;</code></li><li><code>export { default as Name } from &quot;./file&quot;</code></li></ul></li></ul><h2 id="_9-symbol" tabindex="-1">9. <code>Symbol</code> <a class="header-anchor" href="#_9-symbol" aria-hidden="true">#</a></h2><ul><li>独一无二的值</li><li>不能被<code>new</code></li></ul><h3 id="_9-1-创建symbol" tabindex="-1">9-1 创建<code>Symbol</code> <a class="header-anchor" href="#_9-1-创建symbol" aria-hidden="true">#</a></h3><blockquote><ul><li><code>Symbol(Description)</code></li><li><code>Symbol.for(Description)</code></li><li><code>Symbol.keyFor(sym)</code></li></ul></blockquote><h3 id="_9-2-symbol-prototype" tabindex="-1">9-2 <code>Symbol.prototype</code> <a class="header-anchor" href="#_9-2-symbol-prototype" aria-hidden="true">#</a></h3><blockquote><ul><li><code>description</code>，只读</li><li><code>toString()</code></li><li><code>valueOf()</code></li></ul></blockquote><h3 id="_9-3-symbol" tabindex="-1">9-3 <code>Symbol</code> <a class="header-anchor" href="#_9-3-symbol" aria-hidden="true">#</a></h3><blockquote><ul><li><code>asyncIterator</code>，异步迭代器方法</li><li><code>iterator</code>，迭代器方法</li><li><code>toStringTag</code>，字符串</li></ul></blockquote><h2 id="_10-set、map" tabindex="-1">10. <code>Set、Map</code> <a class="header-anchor" href="#_10-set、map" aria-hidden="true">#</a></h2><ul><li><code>Set</code>，不允许重复的，没有索引（索引就是值本身）的<code>Array</code></li></ul><h3 id="_10-1-set-prototype" tabindex="-1">10-1 <code>Set.prototype</code> <a class="header-anchor" href="#_10-1-set-prototype" aria-hidden="true">#</a></h3><blockquote><ul><li><code>size</code></li><li><code>add(value)</code>，返回<code>this</code></li><li><code>has(value)</code></li><li><code>delete(value)</code>，删除前返回<code>has()</code>的结果</li><li><code>clear()</code></li><li><code>entries()</code>，返回迭<code>[value, value]</code>代器对象</li><li><code>keys()</code>，返回所有<code>value</code>的迭代器对象</li><li><code>values()</code>，同上</li><li><code>forEach()</code></li></ul></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> set </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#A6ACCD;">([</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">])</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> set2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">123456</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><ul><li><code>Map</code>，允许除<code>String</code>和<code>Symbol</code>以外的类型作键名的<code>Object</code></li></ul><h3 id="_10-2-map-protytype" tabindex="-1">10-2 <code>Map.protytype</code> <a class="header-anchor" href="#_10-2-map-protytype" aria-hidden="true">#</a></h3><blockquote><ul><li><code>size</code></li><li><code>set(key, value)</code>，返回<code>this</code></li><li><code>has(key)</code></li><li><code>delete(key)</code>，删除前返回<code>has()</code>的结果</li><li><code>get(key)</code></li><li><code>clear()</code></li><li><code>forEach()</code></li><li><code>keys()</code>，返回所有<code>key</code>的迭代对象</li><li><code>values()</code>，返回所有<code>value</code>的迭代对象</li><li><code>entries()</code>，返回所有<code>[key,value]</code>的迭代对象</li></ul></blockquote><h2 id="_11-参数" tabindex="-1">11. 参数 <a class="header-anchor" href="#_11-参数" aria-hidden="true">#</a></h2><ul><li>默认值</li><li>剩余参数</li></ul><h2 id="_12-promise" tabindex="-1">12. <code>promise</code> <a class="header-anchor" href="#_12-promise" aria-hidden="true">#</a></h2><blockquote><ul><li>then()</li><li>catch()</li></ul></blockquote><h1 id="es2016" tabindex="-1">ES2016 <a class="header-anchor" href="#es2016" aria-hidden="true">#</a></h1><h2 id="_1-求幂运算符" tabindex="-1">1. 求幂运算符 <a class="header-anchor" href="#_1-求幂运算符" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#676E95;font-style:italic;">//8</span></span>
<span class="line"><span style="color:#F78C6C;">9</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#676E95;font-style:italic;">//243</span></span>
<span class="line"></span></code></pre></div><h2 id="_2-array-prototype" tabindex="-1">2. <code>Array.prototype</code> <a class="header-anchor" href="#_2-array-prototype" aria-hidden="true">#</a></h2><blockquote><ul><li><code>includes(item, fromIndex)</code>，判断<code>Array</code>中是否含有<code>item</code></li></ul></blockquote><h1 id="es2017" tabindex="-1">ES2017 <a class="header-anchor" href="#es2017" aria-hidden="true">#</a></h1><h2 id="_1-string-prototype" tabindex="-1">1. <code>String.prototype</code> <a class="header-anchor" href="#_1-string-prototype" aria-hidden="true">#</a></h2><blockquote><ul><li><code>padStart(targetLength, padString)</code>，在<code>this</code>的开头填充<code>padString</code>（默认为<code></code>）直到<code>this.length === targetLength</code>，多的会被截掉</li><li><code>padEnd(targetLength, padString)</code>，基本同上，在尾部填充</li></ul></blockquote><h2 id="_2-object-prototype" tabindex="-1">2. <code>Object.prototype</code> <a class="header-anchor" href="#_2-object-prototype" aria-hidden="true">#</a></h2><blockquote><ul><li><code>keys()</code></li><li><code>values()</code></li><li><code>entries()</code></li></ul></blockquote><h2 id="_3-object" tabindex="-1">3. <code>Object</code> <a class="header-anchor" href="#_3-object" aria-hidden="true">#</a></h2><blockquote><ul><li><code>getOwnPropertyDescriptors(obj, &quot;prop&quot;)</code>，返回对<code>obj</code>的<code>prop</code>属性的描述（可写、可枚举、可删除...）</li></ul></blockquote><h2 id="_4-promise" tabindex="-1">4. <code>promise</code> <a class="header-anchor" href="#_4-promise" aria-hidden="true">#</a></h2><blockquote><ul><li><code>async/await</code></li></ul></blockquote><h1 id="es2018" tabindex="-1">ES2018 <a class="header-anchor" href="#es2018" aria-hidden="true">#</a></h1><h2 id="_1-正则" tabindex="-1">1. 正则 <a class="header-anchor" href="#_1-正则" aria-hidden="true">#</a></h2><ul><li>dotAll</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> reg </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">s</span></span>
<span class="line"></span></code></pre></div><ul><li>命名捕获组</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> reg </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/(?&lt;</span><span style="color:#A6ACCD;">number</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">+)(?&lt;</span><span style="color:#A6ACCD;">chinese</span><span style="color:#89DDFF;">&gt;[^</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">]+)/</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123一二三</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">reg</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">exec</span><span style="color:#A6ACCD;">(str)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">[</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  &#39;123一二三&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  &#39;123&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  &#39;一二三&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  index: 0,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  input: &#39;123一二三&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  groups: [Object: null prototype] { number: &#39;123&#39;, chinese: &#39;一二三&#39; }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#A6ACCD;">reg</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">exec</span><span style="color:#A6ACCD;">(str)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">groups</span><span style="color:#676E95;font-style:italic;">//{ number: &#39;123&#39;, chinese: &#39;一二三&#39; }</span></span>
<span class="line"><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#A6ACCD;">(reg)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">groups</span><span style="color:#676E95;font-style:italic;">//{ number: &#39;123&#39;, chinese: &#39;一二三&#39; }</span></span>
<span class="line"></span></code></pre></div><ul><li>先行断言or后行断言</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//先行</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> reg </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">(?=</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">)/</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//仅匹配1，但1的后面必须跟2</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> reg2 </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">(?!</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">)/</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//仅匹配1，但1的后面不能跟2</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//后行</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> reg3 </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">(?&lt;=</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">)/</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//仅匹配1，但1的前面必须是2</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> reg4 </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">(?&lt;!</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">)/</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//仅匹配1，但1的前面不能是2</span></span>
<span class="line"></span></code></pre></div><ul><li>Unicode转义符</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> reg </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\p</span><span style="color:#C3E88D;">{sc=Han}</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">u</span><span style="color:#676E95;font-style:italic;">//匹配所有汉字</span></span>
<span class="line"></span></code></pre></div><h2 id="_2-promise" tabindex="-1">2. <code>Promise</code> <a class="header-anchor" href="#_2-promise" aria-hidden="true">#</a></h2><blockquote><ul><li><code>finally(callback)</code></li><li><code>for await of</code></li></ul></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> retPro </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">par</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">res</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">par</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">成功</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">generator</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">yield</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">retPro</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> iterator </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">generator</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> iterator) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h1 id="es2019" tabindex="-1">ES2019 <a class="header-anchor" href="#es2019" aria-hidden="true">#</a></h1><h2 id="_1-try-catch-finally" tabindex="-1">1. <code>try...catch...finally</code> <a class="header-anchor" href="#_1-try-catch-finally" aria-hidden="true">#</a></h2><ul><li><code>catch()</code>的参数不再是强制的</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">try执行了</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Error</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">错误信息</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">catch执行了</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">finally</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">全部执行完了</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="_2-function-prototype" tabindex="-1">2. <code>function.prototype</code> <a class="header-anchor" href="#_2-function-prototype" aria-hidden="true">#</a></h2><blockquote><ul><li><code>toString()</code></li></ul></blockquote><h2 id="_3-object-1" tabindex="-1">3. <code>Object</code> <a class="header-anchor" href="#_3-object-1" aria-hidden="true">#</a></h2><blockquote><ul><li><code>fromEntries(arr)</code></li></ul></blockquote><h2 id="_4-array-prototype" tabindex="-1">4. <code>Array.prototype</code> <a class="header-anchor" href="#_4-array-prototype" aria-hidden="true">#</a></h2><blockquote><ul><li><code>flat(int)</code>，数组降维，<code>int</code>（1）是要降的层数，可指定为<code>infinity</code></li><li><code>flatMap(callback)</code>，先<code>map(callback)</code>，再<code>flat(1)</code></li></ul></blockquote><h2 id="_5-string-prototype" tabindex="-1">5. <code>String.prototype</code> <a class="header-anchor" href="#_5-string-prototype" aria-hidden="true">#</a></h2><blockquote><ul><li><code>trimStart()</code>or<code>trimLeft()</code></li><li><code>trimEnd()</code>or<code>trimRight()</code></li></ul></blockquote><h1 id="es2020" tabindex="-1">ES2020 <a class="header-anchor" href="#es2020" aria-hidden="true">#</a></h1><h2 id="_1-string-prototype-1" tabindex="-1">1. <code>String.prototype</code> <a class="header-anchor" href="#_1-string-prototype-1" aria-hidden="true">#</a></h2><blockquote><ul><li><code>matchAll(reg)</code>，<code>reg</code>必须开启<code>g</code>标志</li></ul><div class="language-powershell"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">4</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#89DDFF;">---</span><span style="color:#A6ACCD;">上是match的结果，下是matchAll的结果</span><span style="color:#89DDFF;">---</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">index</span><span style="color:#A6ACCD;">: </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">input</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1一2二3三4四</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">groups</span><span style="color:#A6ACCD;">: </span><span style="color:#C792EA;">undefined</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">index</span><span style="color:#A6ACCD;">: </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">input</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1一2二3三4四</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">groups</span><span style="color:#A6ACCD;">: </span><span style="color:#C792EA;">undefined</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">index</span><span style="color:#A6ACCD;">: </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">input</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1一2二3三4四</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">groups</span><span style="color:#A6ACCD;">: </span><span style="color:#C792EA;">undefined</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">4</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">index</span><span style="color:#A6ACCD;">: </span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">input</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1一2二3三4四</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">groups</span><span style="color:#A6ACCD;">: </span><span style="color:#C792EA;">undefined</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span></code></pre></div></blockquote><h2 id="_2-动态import" tabindex="-1">2. 动态<code>import</code> <a class="header-anchor" href="#_2-动态import" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./file</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="_3-bigint" tabindex="-1">3. <code>BigInt</code> <a class="header-anchor" href="#_3-bigint" aria-hidden="true">#</a></h2><ul><li>安全整数的范围 -2^53-1 ~ 2^53-1</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 字面量</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#C792EA;">n</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//new</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> num2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BigInt</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//不能直接与number进行+-*/运算</span></span>
<span class="line"></span></code></pre></div><h2 id="_4-promise-1" tabindex="-1">4. <code>Promise</code> <a class="header-anchor" href="#_4-promise-1" aria-hidden="true">#</a></h2><blockquote><ul><li><code>allSettled(iterable)</code>，全部得出结果时，返回结果构成的<code>array</code></li></ul></blockquote><h2 id="_5-globalthis" tabindex="-1">5. <code>globalThis</code> <a class="header-anchor" href="#_5-globalthis" aria-hidden="true">#</a></h2><h2 id="_6" tabindex="-1">6. <code>?.</code> <a class="header-anchor" href="#_6" aria-hidden="true">#</a></h2><blockquote><ul><li><code>obj?.property</code></li><li><code>fun?.()</code></li></ul></blockquote><h2 id="_7" tabindex="-1">7. <code>??</code> <a class="header-anchor" href="#_7" aria-hidden="true">#</a></h2><h1 id="es2021" tabindex="-1">ES2021 <a class="header-anchor" href="#es2021" aria-hidden="true">#</a></h1><h2 id="string-prototype" tabindex="-1"><code>String.prototype</code> <a class="header-anchor" href="#string-prototype" aria-hidden="true">#</a></h2><blockquote><ul><li><code>replaceAll(oldStr, newStr)</code></li><li><code>any(iterable)</code>，有一个成功就返回成功实例|<code>race(iterable)</code>，返回第一个的状态，无论成败</li></ul></blockquote><h2 id="逻辑赋值运算符" tabindex="-1">逻辑赋值运算符 <a class="header-anchor" href="#逻辑赋值运算符" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">&amp;&amp;=</span><span style="color:#A6ACCD;"> y  </span><span style="color:#676E95;font-style:italic;">// 相当于 x &amp;&amp; (x = y)，x为真值就x=y</span></span>
<span class="line"><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">||=</span><span style="color:#A6ACCD;"> y  </span><span style="color:#676E95;font-style:italic;">// 相当于 x || (x = y)，x为假值就x=y</span></span>
<span class="line"><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">??=</span><span style="color:#A6ACCD;"> y  </span><span style="color:#676E95;font-style:italic;">// 相当于 x ?? (x = y)，x为null或undefined就x=y</span></span>
<span class="line"></span></code></pre></div><h2 id="数字分隔符" tabindex="-1">数字分隔符 <a class="header-anchor" href="#数字分隔符" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1_000</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a) </span><span style="color:#676E95;font-style:italic;">// 1000</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1_000_000</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(b) </span><span style="color:#676E95;font-style:italic;">// 1000000</span></span>
<span class="line"></span></code></pre></div><h1 id="es2022" tabindex="-1">ES2022 <a class="header-anchor" href="#es2022" aria-hidden="true">#</a></h1><h2 id="_1-顶层await" tabindex="-1">1. 顶层<code>await</code> <a class="header-anchor" href="#_1-顶层await" aria-hidden="true">#</a></h2><h2 id="_2-array-prototype-1" tabindex="-1">2. <code>Array.prototype</code> <a class="header-anchor" href="#_2-array-prototype-1" aria-hidden="true">#</a></h2><ul><li><code>at(index)</code>，允许负值</li></ul>`,106),p=[e];function t(c,r,i,y,d,D){return a(),l("div",null,p)}const h=s(o,[["render",t]]);export{C as __pageData,h as default};
