import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.395e6a84.js";const b=JSON.parse('{"title":"Function","description":"","frontmatter":{},"headers":[],"relativePath":"ecmascript/02_objects/Function.md","filePath":"ecmascript/02_objects/Function.md","lastUpdated":1686325478000}'),p={name:"ecmascript/02_objects/Function.md"},o=l(`<h1 id="function" tabindex="-1">Function <a class="header-anchor" href="#function" aria-label="Permalink to &quot;Function&quot;">​</a></h1><h2 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h2><ul><li><a href="#bind">bind</a></li><li><a href="#call">call</a></li><li><a href="#apply">apply</a></li></ul><h2 id="案例" tabindex="-1">案例 <a class="header-anchor" href="#案例" aria-label="Permalink to &quot;案例&quot;">​</a></h2><h3 id="bind" tabindex="-1">bind <a class="header-anchor" href="#bind" aria-label="Permalink to &quot;bind&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fun</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">param1</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">params2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, params);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fx</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fun.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(obj, </span><span style="color:#9ECBFF;">&quot;params1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;params2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">fx</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fun</span><span style="color:#24292E;">(</span><span style="color:#E36209;">param1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">params2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, params);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fx</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fun.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(obj, </span><span style="color:#032F62;">&quot;params1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;params2&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">fx</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="call" tabindex="-1">call <a class="header-anchor" href="#call" aria-label="Permalink to &quot;call&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fun</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">param1</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">params2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, params);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">fun.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(obj, </span><span style="color:#9ECBFF;">&quot;params1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;params2&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fun</span><span style="color:#24292E;">(</span><span style="color:#E36209;">param1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">params2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, params);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">fun.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(obj, </span><span style="color:#032F62;">&quot;params1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;params2&quot;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="apply" tabindex="-1">apply <a class="header-anchor" href="#apply" aria-label="Permalink to &quot;apply&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fun</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">param1</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">params2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, params);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">fun.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(obj, [</span><span style="color:#9ECBFF;">&quot;params1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;params2&quot;</span><span style="color:#E1E4E8;">]);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fun</span><span style="color:#24292E;">(</span><span style="color:#E36209;">param1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">params2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, params);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">fun.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(obj, [</span><span style="color:#032F62;">&quot;params1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;params2&quot;</span><span style="color:#24292E;">]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="arguments" tabindex="-1">arguments <a class="header-anchor" href="#arguments" aria-label="Permalink to &quot;arguments&quot;">​</a></h2><ul><li>存放函数实参的类数组</li><li>callee 属性指向函数本身</li></ul><h2 id="arrow-function" tabindex="-1">Arrow Function <a class="header-anchor" href="#arrow-function" aria-label="Permalink to &quot;Arrow Function&quot;">​</a></h2><ul><li>静态 this：this 永远指向创建它的作用域里的 this</li><li>没有 arguments：使用 restProps 替代 arguments</li><li>没有 constructor：不能被 new 关字键调用</li></ul><h2 id="适用场景" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景" aria-label="Permalink to &quot;适用场景&quot;">​</a></h2><ul><li>需要 this 指针 ？Function : Arrow Function</li><li>需要函数提升 ？Function : Arrow Function</li></ul>`,16),e=[o];function r(t,c,i,E,y,u){return a(),n("div",null,e)}const h=s(p,[["render",r]]);export{b as __pageData,h as default};
