import{_ as s,c as a,o as n,a as l}from"./app.335117dc.js";const h=JSON.parse('{"title":"Error","description":"","frontmatter":{},"headers":[{"level":2,"title":"构造器","slug":"构造器","link":"#构造器","children":[]},{"level":2,"title":"实例属性","slug":"实例属性","link":"#实例属性","children":[{"level":3,"title":"message","slug":"message","link":"#message","children":[]}]},{"level":2,"title":"try...catch...finally & throw","slug":"try-catch-finally-throw","link":"#try-catch-finally-throw","children":[]},{"level":2,"title":"错误类型","slug":"错误类型","link":"#错误类型","children":[]}],"relativePath":"ecmascript/02_objects/Error.md","lastUpdated":1675006511000}'),e={name:"ecmascript/02_objects/Error.md"},t=l(`<h1 id="error" tabindex="-1">Error <a class="header-anchor" href="#error" aria-hidden="true">#</a></h1><h2 id="构造器" tabindex="-1">构造器 <a class="header-anchor" href="#构造器" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Error</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">可读的错误信息</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="实例属性" tabindex="-1">实例属性 <a class="header-anchor" href="#实例属性" aria-hidden="true">#</a></h2><h3 id="message" tabindex="-1">message <a class="header-anchor" href="#message" aria-hidden="true">#</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Error</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">错误信息</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//&quot;错误信息&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="try-catch-finally-throw" tabindex="-1">try...catch...finally &amp; throw <a class="header-anchor" href="#try-catch-finally-throw" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Error</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">出现错误</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> (err) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * 若try后的代码块中没有抛出错误，则这个代码块不执行</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * err为try后的代码块中被throw关键字抛出的信息，】</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * err可以不是Error对象</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * err可以省略，省略时只保留一个catch关键字</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">error</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">message</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">finally</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">不管catch执不执行，这里都执行</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="错误类型" tabindex="-1">错误类型 <a class="header-anchor" href="#错误类型" aria-hidden="true">#</a></h2><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">意义</th></tr></thead><tbody><tr><td style="text-align:left;">ReferenceError</td><td style="text-align:left;">当一个不存在（或尚未初始化）的变量被引用时发生的错误。</td></tr><tr><td style="text-align:left;">SyntaxError</td><td style="text-align:left;">尝试解析不符合语法的代码的错误。当 Javascript 引擎解析代码时，遇到了不符合语法规范的标记（token）或标记顺序，则会抛出 SyntaxError。</td></tr><tr><td style="text-align:left;">RangeError</td><td style="text-align:left;">试图将一个值作为参数传递给一个允许的范围不包含该值的函数会引发</td></tr><tr><td style="text-align:left;">TypeError</td><td style="text-align:left;">通常（但并不只是）用来表示值的类型非预期类型时发生的错误。</td></tr></tbody></table>`,10),r=[t];function p(o,c,i,y,d,D){return n(),a("div",null,r)}const u=s(e,[["render",p]]);export{h as __pageData,u as default};
